stages:
  - configure
  - build
  - package_image

variables:
  CMAKE_BUILD_TYPE: Release
  CONAN_USER_HOME: /builds/$CI_PROJECT_PATH # Ensure Conan uses a project-specific home
  DOCKER_IMAGE_NAME: your-docker-registry/your-image-name # Replace with your Docker image name
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA # Or a specific tag

configure:
  stage: configure
  image: conanio/gcc11-ubuntu20.04:latest # Or your preferred Conan image
  script:
    - apt-get update && apt-get install -y cmake  # Install CMake if not in image
    - mkdir build
    - cd build
    - conan profile detect # Detect Conan profile
    - conan install .. --output-folder build --build missing
    - cmake .. -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  artifacts:
    paths:
      - build/conaninfo.txt
      - build/conanbuildinfo.cmake
    expire_in: 1 day

build:
  stage: build
  image: conanio/gcc11-ubuntu20.04:latest # Use the same image as configure
  dependencies:
    - configure
  script:
    - apt-get update && apt-get install -y cmake  # Ensure CMake is present
    - cd build
    - cmake --build . --config ${CMAKE_BUILD_TYPE}
  artifacts:
    paths:
      - build/your_executable_name # Replace with your actual executable name
    expire_in: 1 day

package_image:
  stage: package_image
  image: docker:latest
  dependencies:
    - build
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "" # Required for Docker in Docker on GitLab CI
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY # Login to GitLab Registry
    - docker build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - docker push "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
  only:
    - main # Or your desired branch for building Docker images