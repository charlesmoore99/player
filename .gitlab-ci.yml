image: ubuntu:latest

include:
- template: Security/SAST.gitlab-ci.yml

stages:
  - configure
  - build
  - test
  - package_image
  - tag

variables:
  CMAKE_BUILD_TYPE: Release
  CONAN_USER_HOME: /builds/$CI_PROJECT_PATH # Ensure Conan uses a project-specific home
  DOCKER_IMAGE_NAME: "registry.gitlab.com/$CI_PROJECT_PATH" # Replace with your Docker image name
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA # Or a specific tag

configure:
  stage: configure
  script:
    - apt-get update && apt-get install -y cmake build-essential cmake python3 python3-pip # Install CMake if not in image
    - pip3 install --break-system-packages conan
    - mkdir build
    - conan profile detect --force
    - conan install . --build=missing
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE="Release/generators/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Release
  artifacts:
    paths:
      - /root/.conan2/profiles/default
      - build/Release/generators/conan_toolchain.cmake
    expire_in: 1 day

build:
  stage: build
  dependencies:
    - configure
  script:
    - apt-get update && apt-get install -y cmake build-essential cmake python3 python3-pip # Install CMake if not in image
    - pip3 install --break-system-packages conan
    - conan profile detect # Detect Conan profile
    - conan install . --build=missing
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE="Release/generators/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Release
    - cmake --build .
  artifacts:
    paths:
      - build/player
    expire_in: 1 day

test:
  stage: test
  dependencies:
    - build
  script:
    - apt-get update && apt-get install -y cmake build-essential cmake python3 python3-pip # Install CMake if not in image
    - pip3 install --break-system-packages conan
    - conan profile detect # Detect Conan profile
    - conan install . --build=missing
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE="Release/generators/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Release
    - cmake --build .
    - ./test_player --reporter junit -o test-results.xml
  artifacts:
    reports:
      junit: build/test-results.xml    
    expire_in: 1 day

sast:
  stage: test

package_image:
  stage: package_image
  image: docker:latest
  dependencies:
    - build
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs" # Required for Docker in Docker on GitLab CI
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY # Login to GitLab Registry
    - docker build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - docker push "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
  only:
    - master # Or your desired branch for building Docker images

tag:
  stage: release
  script:
    - docker pull "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
    - docker tag -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" "$DOCKER_IMAGE_NAME:latest"
    - docker push "$DOCKER_IMAGE_NAME:latest"
  only:
    - master
